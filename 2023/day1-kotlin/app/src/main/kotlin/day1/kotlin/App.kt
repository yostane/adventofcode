/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day1.kotlin

fun runPartOne(lines: List<String>) {
    val filteredLines = lines.map { line -> line.filter { Character.isDigit(it) } }
    val onlyTwoDigitLines = filteredLines
        .map { line -> "${line.first()}${line.last()}" }
    val sum = onlyTwoDigitLines
        .sumOf { it.toInt() }
    println(filteredLines)
    println(onlyTwoDigitLines)
    println(sum)
}

val digitStrings = listOf("one", "two", "three", "four", "five", "six", "seven", "eight", "nine")
val stringToDigitMap = digitStrings.mapIndexed { index, item -> item to "${index + 1}" }.toMap()

fun runPartTwoWrongAlso(lines: List<String>) {
    val filteredLines = lines.map { line ->
        var replacedLine = line
        for (entry in stringToDigitMap) {
            replacedLine = replacedLine.replace(entry.key, entry.value)
        }
        replacedLine
    }
    println(filteredLines)
    runPartOne(filteredLines)
}


fun runPartTwoRegEx(lines: List<String>) {
    val regex = Regex("(\\d)|(\\b${digitStrings.joinToString("|")}\\b)")
    val filtedLines = lines.map { line ->
//        regex.findAll(line).map { it.value }.toList()
        val regexResult = regex.findAll(line)
        println(regexResult)
    }
    println(filtedLines)

//    val numbers = filteredLines.map { strings -> strings.map { stringToDigitMap[it] } }
//        .map { it.joinToString(separator = "") }
//        .filter { it.isNotEmpty() }
//    val toSumitems = numbers.map { "${it.first()}${it.last()}" }
//    val result = toSumitems.map { "${it.first()}${it.last()}" }
//        .sumOf { it.toInt() }
//    println(numbers)
//    println(toSumitems)
//    println(result)
}


fun runPartTwo(lines: List<String>) {
    val step1lines = lines.map { line ->
        var r = ""
        for (i in line.indices) {
            r += if (line[i].isDigit()) {
                line[i]
            } else {
                val t = line.substring(i)
                stringToDigitMap[digitStrings.firstOrNull {
                    t.indexOf(it) == 0
                }] ?: ""
            }
        }
        r
    }
    runPartOne(step1lines)
}


fun main() {
    val lines = puzzleInput.split("\n")
    println(lines)
    println("part 1")
    runPartOne(lines)
    println("part 2")
    runPartTwo(lines)
}

